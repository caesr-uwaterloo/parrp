// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_mem_trace.proto

#include "custom_mem_trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ProtoMessage {
class CustomMemTraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomMemTrace>
      _instance;
} _CustomMemTrace_default_instance_;
class AddrAccessStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddrAccessStats>
      _instance;
} _AddrAccessStats_default_instance_;
}  // namespace ProtoMessage
namespace protobuf_custom_5fmem_5ftrace_2eproto {
static void InitDefaultsCustomMemTrace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_CustomMemTrace_default_instance_;
    new (ptr) ::ProtoMessage::CustomMemTrace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::CustomMemTrace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomMemTrace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomMemTrace}, {}};

static void InitDefaultsAddrAccessStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_AddrAccessStats_default_instance_;
    new (ptr) ::ProtoMessage::AddrAccessStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::AddrAccessStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddrAccessStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddrAccessStats}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CustomMemTrace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddrAccessStats.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, bb_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, line_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, access_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, hit_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::CustomMemTrace, data_region_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, bb_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, line_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, is_ifetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, num_local_l1_hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, num_remote_l1_hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, num_l2_hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, num_memory_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, data_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, is_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::AddrAccessStats, exec_cycles_),
  3,
  0,
  1,
  4,
  2,
  6,
  7,
  8,
  9,
  10,
  5,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::ProtoMessage::CustomMemTrace)},
  { 19, 36, sizeof(::ProtoMessage::AddrAccessStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoMessage::_CustomMemTrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoMessage::_AddrAccessStats_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "custom_mem_trace.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026custom_mem_trace.proto\022\014ProtoMessage\"\274"
      "\003\n\016CustomMemTrace\022\r\n\005bb_id\030\001 \002(\005\022\017\n\007addr"
      "ess\030\002 \002(\004\022\024\n\014line_address\030\003 \002(\004\022<\n\013acces"
      "s_type\030\004 \002(\0162\'.ProtoMessage.CustomMemTra"
      "ce.AccessType\022:\n\nhit_status\030\005 \002(\0162&.Prot"
      "oMessage.CustomMemTrace.HitStatus\022\021\n\tthr"
      "ead_id\030\006 \002(\005\022<\n\013data_region\030\007 \002(\0162\'.Prot"
      "oMessage.CustomMemTrace.DataRegion\"-\n\nAc"
      "cessType\022\n\n\006IFETCH\020\000\022\010\n\004READ\020\001\022\t\n\005WRITE\020"
      "\002\"K\n\tHitStatus\022\021\n\rLocal_L1Cache\020\000\022\022\n\016Rem"
      "ote_L1Cache\020\001\022\013\n\007L2Cache\020\002\022\n\n\006Memory\020\003\"-"
      "\n\nDataRegion\022\n\n\006GLOBAL\020\000\022\t\n\005STACK\020\001\022\010\n\004H"
      "EAP\020\002\"\351\002\n\017AddrAccessStats\022\r\n\005bb_id\030\001 \002(\005"
      "\022\017\n\007address\030\002 \002(\004\022\024\n\014line_address\030\003 \002(\004\022"
      "\021\n\tis_ifetch\030\004 \002(\010\022\030\n\020num_local_l1_hit\030\005"
      " \002(\004\022\031\n\021num_remote_l1_hit\030\006 \002(\004\022\022\n\nnum_l"
      "2_hit\030\007 \002(\004\022\031\n\021num_memory_access\030\010 \002(\004\022\021"
      "\n\tthread_id\030\t \002(\005\022=\n\013data_region\030\n \002(\0162("
      ".ProtoMessage.AddrAccessStats.DataRegion"
      "\022\023\n\013is_metadata\030\013 \002(\010\022\023\n\013exec_cycles\030\014 \002"
      "(\004\"-\n\nDataRegion\022\n\n\006GLOBAL\020\000\022\t\n\005STACK\020\001\022"
      "\010\n\004HEAP\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "custom_mem_trace.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_custom_5fmem_5ftrace_2eproto
namespace ProtoMessage {
const ::google::protobuf::EnumDescriptor* CustomMemTrace_AccessType_descriptor() {
  protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_custom_5fmem_5ftrace_2eproto::file_level_enum_descriptors[0];
}
bool CustomMemTrace_AccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CustomMemTrace_AccessType CustomMemTrace::IFETCH;
const CustomMemTrace_AccessType CustomMemTrace::READ;
const CustomMemTrace_AccessType CustomMemTrace::WRITE;
const CustomMemTrace_AccessType CustomMemTrace::AccessType_MIN;
const CustomMemTrace_AccessType CustomMemTrace::AccessType_MAX;
const int CustomMemTrace::AccessType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CustomMemTrace_HitStatus_descriptor() {
  protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_custom_5fmem_5ftrace_2eproto::file_level_enum_descriptors[1];
}
bool CustomMemTrace_HitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CustomMemTrace_HitStatus CustomMemTrace::Local_L1Cache;
const CustomMemTrace_HitStatus CustomMemTrace::Remote_L1Cache;
const CustomMemTrace_HitStatus CustomMemTrace::L2Cache;
const CustomMemTrace_HitStatus CustomMemTrace::Memory;
const CustomMemTrace_HitStatus CustomMemTrace::HitStatus_MIN;
const CustomMemTrace_HitStatus CustomMemTrace::HitStatus_MAX;
const int CustomMemTrace::HitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CustomMemTrace_DataRegion_descriptor() {
  protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_custom_5fmem_5ftrace_2eproto::file_level_enum_descriptors[2];
}
bool CustomMemTrace_DataRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CustomMemTrace_DataRegion CustomMemTrace::GLOBAL;
const CustomMemTrace_DataRegion CustomMemTrace::STACK;
const CustomMemTrace_DataRegion CustomMemTrace::HEAP;
const CustomMemTrace_DataRegion CustomMemTrace::DataRegion_MIN;
const CustomMemTrace_DataRegion CustomMemTrace::DataRegion_MAX;
const int CustomMemTrace::DataRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AddrAccessStats_DataRegion_descriptor() {
  protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_custom_5fmem_5ftrace_2eproto::file_level_enum_descriptors[3];
}
bool AddrAccessStats_DataRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AddrAccessStats_DataRegion AddrAccessStats::GLOBAL;
const AddrAccessStats_DataRegion AddrAccessStats::STACK;
const AddrAccessStats_DataRegion AddrAccessStats::HEAP;
const AddrAccessStats_DataRegion AddrAccessStats::DataRegion_MIN;
const AddrAccessStats_DataRegion AddrAccessStats::DataRegion_MAX;
const int AddrAccessStats::DataRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CustomMemTrace::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomMemTrace::kBbIdFieldNumber;
const int CustomMemTrace::kAddressFieldNumber;
const int CustomMemTrace::kLineAddressFieldNumber;
const int CustomMemTrace::kAccessTypeFieldNumber;
const int CustomMemTrace::kHitStatusFieldNumber;
const int CustomMemTrace::kThreadIdFieldNumber;
const int CustomMemTrace::kDataRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomMemTrace::CustomMemTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_custom_5fmem_5ftrace_2eproto::scc_info_CustomMemTrace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.CustomMemTrace)
}
CustomMemTrace::CustomMemTrace(const CustomMemTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_region_) -
    reinterpret_cast<char*>(&address_)) + sizeof(data_region_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.CustomMemTrace)
}

void CustomMemTrace::SharedCtor() {
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_region_) -
      reinterpret_cast<char*>(&address_)) + sizeof(data_region_));
}

CustomMemTrace::~CustomMemTrace() {
  // @@protoc_insertion_point(destructor:ProtoMessage.CustomMemTrace)
  SharedDtor();
}

void CustomMemTrace::SharedDtor() {
}

void CustomMemTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomMemTrace::descriptor() {
  ::protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_custom_5fmem_5ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomMemTrace& CustomMemTrace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_custom_5fmem_5ftrace_2eproto::scc_info_CustomMemTrace.base);
  return *internal_default_instance();
}


void CustomMemTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.CustomMemTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_region_) -
        reinterpret_cast<char*>(&address_)) + sizeof(data_region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomMemTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.CustomMemTrace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bb_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bb_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bb_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 line_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_line_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &line_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoMessage.CustomMemTrace.AccessType access_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMessage::CustomMemTrace_AccessType_IsValid(value)) {
            set_access_type(static_cast< ::ProtoMessage::CustomMemTrace_AccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoMessage.CustomMemTrace.HitStatus hit_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMessage::CustomMemTrace_HitStatus_IsValid(value)) {
            set_hit_status(static_cast< ::ProtoMessage::CustomMemTrace_HitStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 thread_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoMessage.CustomMemTrace.DataRegion data_region = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMessage::CustomMemTrace_DataRegion_IsValid(value)) {
            set_data_region(static_cast< ::ProtoMessage::CustomMemTrace_DataRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.CustomMemTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.CustomMemTrace)
  return false;
#undef DO_
}

void CustomMemTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.CustomMemTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bb_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bb_id(), output);
  }

  // required uint64 address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->address(), output);
  }

  // required uint64 line_address = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->line_address(), output);
  }

  // required .ProtoMessage.CustomMemTrace.AccessType access_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->access_type(), output);
  }

  // required .ProtoMessage.CustomMemTrace.HitStatus hit_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->hit_status(), output);
  }

  // required int32 thread_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->thread_id(), output);
  }

  // required .ProtoMessage.CustomMemTrace.DataRegion data_region = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->data_region(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.CustomMemTrace)
}

::google::protobuf::uint8* CustomMemTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.CustomMemTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bb_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bb_id(), target);
  }

  // required uint64 address = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->address(), target);
  }

  // required uint64 line_address = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->line_address(), target);
  }

  // required .ProtoMessage.CustomMemTrace.AccessType access_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->access_type(), target);
  }

  // required .ProtoMessage.CustomMemTrace.HitStatus hit_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->hit_status(), target);
  }

  // required int32 thread_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->thread_id(), target);
  }

  // required .ProtoMessage.CustomMemTrace.DataRegion data_region = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->data_region(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.CustomMemTrace)
  return target;
}

size_t CustomMemTrace::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.CustomMemTrace)
  size_t total_size = 0;

  if (has_address()) {
    // required uint64 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  if (has_bb_id()) {
    // required int32 bb_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bb_id());
  }

  if (has_access_type()) {
    // required .ProtoMessage.CustomMemTrace.AccessType access_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  if (has_line_address()) {
    // required uint64 line_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->line_address());
  }

  if (has_hit_status()) {
    // required .ProtoMessage.CustomMemTrace.HitStatus hit_status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hit_status());
  }

  if (has_thread_id()) {
    // required int32 thread_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_id());
  }

  if (has_data_region()) {
    // required .ProtoMessage.CustomMemTrace.DataRegion data_region = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_region());
  }

  return total_size;
}
size_t CustomMemTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.CustomMemTrace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint64 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());

    // required int32 bb_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bb_id());

    // required .ProtoMessage.CustomMemTrace.AccessType access_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());

    // required uint64 line_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->line_address());

    // required .ProtoMessage.CustomMemTrace.HitStatus hit_status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hit_status());

    // required int32 thread_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_id());

    // required .ProtoMessage.CustomMemTrace.DataRegion data_region = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_region());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomMemTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.CustomMemTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomMemTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomMemTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.CustomMemTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.CustomMemTrace)
    MergeFrom(*source);
  }
}

void CustomMemTrace::MergeFrom(const CustomMemTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.CustomMemTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      address_ = from.address_;
    }
    if (cached_has_bits & 0x00000002u) {
      bb_id_ = from.bb_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      access_type_ = from.access_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      line_address_ = from.line_address_;
    }
    if (cached_has_bits & 0x00000010u) {
      hit_status_ = from.hit_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_region_ = from.data_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomMemTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.CustomMemTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomMemTrace::CopyFrom(const CustomMemTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.CustomMemTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMemTrace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void CustomMemTrace::Swap(CustomMemTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomMemTrace::InternalSwap(CustomMemTrace* other) {
  using std::swap;
  swap(address_, other->address_);
  swap(bb_id_, other->bb_id_);
  swap(access_type_, other->access_type_);
  swap(line_address_, other->line_address_);
  swap(hit_status_, other->hit_status_);
  swap(thread_id_, other->thread_id_);
  swap(data_region_, other->data_region_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomMemTrace::GetMetadata() const {
  protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_custom_5fmem_5ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddrAccessStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddrAccessStats::kBbIdFieldNumber;
const int AddrAccessStats::kAddressFieldNumber;
const int AddrAccessStats::kLineAddressFieldNumber;
const int AddrAccessStats::kIsIfetchFieldNumber;
const int AddrAccessStats::kNumLocalL1HitFieldNumber;
const int AddrAccessStats::kNumRemoteL1HitFieldNumber;
const int AddrAccessStats::kNumL2HitFieldNumber;
const int AddrAccessStats::kNumMemoryAccessFieldNumber;
const int AddrAccessStats::kThreadIdFieldNumber;
const int AddrAccessStats::kDataRegionFieldNumber;
const int AddrAccessStats::kIsMetadataFieldNumber;
const int AddrAccessStats::kExecCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddrAccessStats::AddrAccessStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_custom_5fmem_5ftrace_2eproto::scc_info_AddrAccessStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.AddrAccessStats)
}
AddrAccessStats::AddrAccessStats(const AddrAccessStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&exec_cycles_) -
    reinterpret_cast<char*>(&address_)) + sizeof(exec_cycles_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.AddrAccessStats)
}

void AddrAccessStats::SharedCtor() {
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exec_cycles_) -
      reinterpret_cast<char*>(&address_)) + sizeof(exec_cycles_));
}

AddrAccessStats::~AddrAccessStats() {
  // @@protoc_insertion_point(destructor:ProtoMessage.AddrAccessStats)
  SharedDtor();
}

void AddrAccessStats::SharedDtor() {
}

void AddrAccessStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddrAccessStats::descriptor() {
  ::protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_custom_5fmem_5ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddrAccessStats& AddrAccessStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_custom_5fmem_5ftrace_2eproto::scc_info_AddrAccessStats.base);
  return *internal_default_instance();
}


void AddrAccessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.AddrAccessStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_l2_hit_) -
        reinterpret_cast<char*>(&address_)) + sizeof(num_l2_hit_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&num_memory_access_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exec_cycles_) -
        reinterpret_cast<char*>(&num_memory_access_)) + sizeof(exec_cycles_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddrAccessStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.AddrAccessStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bb_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bb_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bb_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 line_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_line_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &line_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_ifetch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_ifetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ifetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 num_local_l1_hit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_local_l1_hit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_local_l1_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 num_remote_l1_hit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_remote_l1_hit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remote_l1_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 num_l2_hit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_l2_hit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_l2_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 num_memory_access = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_num_memory_access();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_memory_access_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 thread_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoMessage.AddrAccessStats.DataRegion data_region = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMessage::AddrAccessStats_DataRegion_IsValid(value)) {
            set_data_region(static_cast< ::ProtoMessage::AddrAccessStats_DataRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_metadata = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 exec_cycles = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_exec_cycles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exec_cycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.AddrAccessStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.AddrAccessStats)
  return false;
#undef DO_
}

void AddrAccessStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.AddrAccessStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bb_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bb_id(), output);
  }

  // required uint64 address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->address(), output);
  }

  // required uint64 line_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->line_address(), output);
  }

  // required bool is_ifetch = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_ifetch(), output);
  }

  // required uint64 num_local_l1_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->num_local_l1_hit(), output);
  }

  // required uint64 num_remote_l1_hit = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_remote_l1_hit(), output);
  }

  // required uint64 num_l2_hit = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->num_l2_hit(), output);
  }

  // required uint64 num_memory_access = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->num_memory_access(), output);
  }

  // required int32 thread_id = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->thread_id(), output);
  }

  // required .ProtoMessage.AddrAccessStats.DataRegion data_region = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->data_region(), output);
  }

  // required bool is_metadata = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_metadata(), output);
  }

  // required uint64 exec_cycles = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->exec_cycles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.AddrAccessStats)
}

::google::protobuf::uint8* AddrAccessStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.AddrAccessStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bb_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bb_id(), target);
  }

  // required uint64 address = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->address(), target);
  }

  // required uint64 line_address = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->line_address(), target);
  }

  // required bool is_ifetch = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_ifetch(), target);
  }

  // required uint64 num_local_l1_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_local_l1_hit(), target);
  }

  // required uint64 num_remote_l1_hit = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_remote_l1_hit(), target);
  }

  // required uint64 num_l2_hit = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->num_l2_hit(), target);
  }

  // required uint64 num_memory_access = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->num_memory_access(), target);
  }

  // required int32 thread_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->thread_id(), target);
  }

  // required .ProtoMessage.AddrAccessStats.DataRegion data_region = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->data_region(), target);
  }

  // required bool is_metadata = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_metadata(), target);
  }

  // required uint64 exec_cycles = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->exec_cycles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.AddrAccessStats)
  return target;
}

size_t AddrAccessStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.AddrAccessStats)
  size_t total_size = 0;

  if (has_address()) {
    // required uint64 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  if (has_line_address()) {
    // required uint64 line_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->line_address());
  }

  if (has_num_local_l1_hit()) {
    // required uint64 num_local_l1_hit = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_local_l1_hit());
  }

  if (has_bb_id()) {
    // required int32 bb_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bb_id());
  }

  if (has_is_ifetch()) {
    // required bool is_ifetch = 4;
    total_size += 1 + 1;
  }

  if (has_is_metadata()) {
    // required bool is_metadata = 11;
    total_size += 1 + 1;
  }

  if (has_num_remote_l1_hit()) {
    // required uint64 num_remote_l1_hit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_remote_l1_hit());
  }

  if (has_num_l2_hit()) {
    // required uint64 num_l2_hit = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_l2_hit());
  }

  if (has_num_memory_access()) {
    // required uint64 num_memory_access = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_memory_access());
  }

  if (has_thread_id()) {
    // required int32 thread_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_id());
  }

  if (has_data_region()) {
    // required .ProtoMessage.AddrAccessStats.DataRegion data_region = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_region());
  }

  if (has_exec_cycles()) {
    // required uint64 exec_cycles = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->exec_cycles());
  }

  return total_size;
}
size_t AddrAccessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.AddrAccessStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint64 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());

    // required uint64 line_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->line_address());

    // required uint64 num_local_l1_hit = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_local_l1_hit());

    // required int32 bb_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bb_id());

    // required bool is_ifetch = 4;
    total_size += 1 + 1;

    // required bool is_metadata = 11;
    total_size += 1 + 1;

    // required uint64 num_remote_l1_hit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_remote_l1_hit());

    // required uint64 num_l2_hit = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_l2_hit());

    // required uint64 num_memory_access = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_memory_access());

    // required int32 thread_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_id());

    // required .ProtoMessage.AddrAccessStats.DataRegion data_region = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_region());

    // required uint64 exec_cycles = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->exec_cycles());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddrAccessStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.AddrAccessStats)
  GOOGLE_DCHECK_NE(&from, this);
  const AddrAccessStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddrAccessStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.AddrAccessStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.AddrAccessStats)
    MergeFrom(*source);
  }
}

void AddrAccessStats::MergeFrom(const AddrAccessStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.AddrAccessStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      address_ = from.address_;
    }
    if (cached_has_bits & 0x00000002u) {
      line_address_ = from.line_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_local_l1_hit_ = from.num_local_l1_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      bb_id_ = from.bb_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_ifetch_ = from.is_ifetch_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_metadata_ = from.is_metadata_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_remote_l1_hit_ = from.num_remote_l1_hit_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_l2_hit_ = from.num_l2_hit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      num_memory_access_ = from.num_memory_access_;
    }
    if (cached_has_bits & 0x00000200u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      data_region_ = from.data_region_;
    }
    if (cached_has_bits & 0x00000800u) {
      exec_cycles_ = from.exec_cycles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddrAccessStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.AddrAccessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrAccessStats::CopyFrom(const AddrAccessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.AddrAccessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrAccessStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void AddrAccessStats::Swap(AddrAccessStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddrAccessStats::InternalSwap(AddrAccessStats* other) {
  using std::swap;
  swap(address_, other->address_);
  swap(line_address_, other->line_address_);
  swap(num_local_l1_hit_, other->num_local_l1_hit_);
  swap(bb_id_, other->bb_id_);
  swap(is_ifetch_, other->is_ifetch_);
  swap(is_metadata_, other->is_metadata_);
  swap(num_remote_l1_hit_, other->num_remote_l1_hit_);
  swap(num_l2_hit_, other->num_l2_hit_);
  swap(num_memory_access_, other->num_memory_access_);
  swap(thread_id_, other->thread_id_);
  swap(data_region_, other->data_region_);
  swap(exec_cycles_, other->exec_cycles_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddrAccessStats::GetMetadata() const {
  protobuf_custom_5fmem_5ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_custom_5fmem_5ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtoMessage::CustomMemTrace* Arena::CreateMaybeMessage< ::ProtoMessage::CustomMemTrace >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoMessage::CustomMemTrace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtoMessage::AddrAccessStats* Arena::CreateMaybeMessage< ::ProtoMessage::AddrAccessStats >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoMessage::AddrAccessStats >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
